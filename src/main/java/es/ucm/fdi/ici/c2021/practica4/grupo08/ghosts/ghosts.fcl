FUNCTION_BLOCK GhostFuzzy	

// Define input variables
VAR_INPUT				
	PacmanNPPdistance : REAL;
	PacmanDistance : REAL;
	GhostNPPdistance : REAL;
	GhostConfidence : REAL;
	GhostEdibleTime : REAL;
END_VAR

// Define output variable
VAR_OUTPUT				
	runAway : REAL;
	attack : REAL;
END_VAR

//#######################################################################

FUZZIFY PacmanNPPdistance
	TERM near := (20, 1) (40, 0) ; 
	TERM medium := gauss 40 15;
	TERM far := (40, 0) (60, 1) (300, 1);
END_FUZZIFY

FUZZIFY GhostNPPdistance
	TERM near := (20, 1) (40, 0) ; 
	TERM medium := gauss 40 15;
	TERM far := (40, 0) (60, 1) (300, 1);
END_FUZZIFY

FUZZIFY GhostEdibleTime
	TERM soon := (0,1)(10, 0) ; 
	TERM normal := gauss 10 5;
	TERM late := (10, 0) (20, 1) (200, 1); //Max 187
END_FUZZIFY

FUZZIFY PacmanDistance
	TERM near := (10, 1) (35, 0) ; 
	TERM medium := gauss 50 30;
	TERM far := (50, 0) (90, 1) (300, 1);
END_FUZZIFY

FUZZIFY GhostConfidence	
	TERM low := (25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY

DEFUZZIFY runAway			
	TERM calm := (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 15.0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY attack			
	TERM excellent := (5,1) (15,0);
	TERM good := gauss 15 5;
	TERM bad := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 15.0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

//#######################################################################

RULEBLOCK GhostRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	//Atacar			
	RULE 1 : IF PacmanNPPdistance IS far THEN attack IS excellent;
	RULE 2 : IF PacmanNPPdistance IS medium THEN attack IS good;
	RULE 3 : IF PacmanNPPdistance IS near THEN attack IS bad;

	RULE 4 : IF PacmanNPPdistance IS near THEN attack IS bad;
	RULE 5 : IF PacmanNPPdistance IS NOT near AND PacmanDistance IS near THEN attack IS excellent;
	RULE 6 : IF PacmanNPPdistance IS NOT near AND PacmanDistance IS medium THEN attack IS good;
	RULE 7 : IF PacmanNPPdistance IS NOT near AND PacmanDistance IS medium THEN attack IS bad;

	RULE 8 : IF GhostEdibleTime IS NOT soon THEN attack IS bad;
	RULE 9 : IF GhostEdibleTime IS soon THEN attack IS excellent;
	
	//Huir
	RULE 1 : IF PacmanNPPdistance IS far THEN runAway IS calm;
	RULE 2 : IF PacmanNPPdistance IS medium THEN runAway IS calm;
	RULE 3 : IF PacmanNPPdistance IS near THEN runAway IS emergency;
	
	RULE 4 : IF PacmanNPPdistance IS near THEN runAway IS emergency;
	RULE 5 : IF PacmanNPPdistance IS NOT near AND PacmanDistance IS near THEN runAway IS calm;
	RULE 6 : IF PacmanNPPdistance IS NOT near AND PacmanDistance IS medium THEN runAway IS nervious;
	RULE 7 : IF PacmanNPPdistance IS NOT near AND PacmanDistance IS medium THEN runAway IS emergency;
	
	RULE 8 : IF GhostEdibleTime IS NOT soon THEN runAway IS emergency;
	RULE 9 : IF GhostEdibleTime IS soon THEN runAway IS calm;
	
END_RULEBLOCK

END_FUNCTION_BLOCK

