FUNCTION_BLOCK MsPacmanFuzzy

// Define input variables
VAR_INPUT				
	BLINKYdistance : REAL;
	PINKYdistance : REAL;
	INKYdistance : REAL;
	SUEdistance : REAL;
	
	BLINKYconfidence : REAL;
	PINKYconfidence : REAL;
	INKYconfidence : REAL;
	SUEconfidence : REAL;
	
	BLINKYNPPdistance : REAL;
	PINKYNPPdistance : REAL;
	INKYNPPdistance : REAL;
	SUENPPdistance : REAL;

	BLINKYEdibleTime : REAL;
	PINKYEdibleTime : REAL;
	INKYEdibleTime : REAL;
	SUEEdibleTime : REAL;
	
	PacmanNPPdistance : REAL;
END_VAR

// Define output variable
VAR_OUTPUT			
	runAway : REAL;
	
	eatBLINKY : REAL;
	eatPINKY : REAL;
	eatINKY : REAL;
	eatSUE : REAL;
	
	eatPowerPill : REAL;
END_VAR


FUZZIFY BLINKYdistance		
	TERM near := (10, 1) (35, 0) ; 
	TERM medium := gauss 50 30;
	TERM far := (50, 0) (90, 1) (300, 1);
END_FUZZIFY
FUZZIFY PINKYdistance			
	TERM near := (10, 1) (35, 0) ; 
	TERM medium := gauss 50 30;
	TERM far := (50, 0) (90, 1) (300, 1);
END_FUZZIFY
FUZZIFY INKYdistance		
	TERM near := (10, 1) (35, 0) ; 
	TERM medium := gauss 50 30;
	TERM far := (50, 0) (90, 1) (300, 1);
END_FUZZIFY
FUZZIFY SUEdistance			
	TERM near := (10, 1) (35, 0) ; 
	TERM medium := gauss 50 30;
	TERM far := (50, 0) (90, 1) (300, 1);
END_FUZZIFY


FUZZIFY BLINKYconfidence			
	TERM low := (25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY INKYconfidence			
	TERM low := (25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY PINKYconfidence		
	TERM low := (25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY SUEconfidence			
	TERM low := (25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY



FUZZIFY BLINKYNPPdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (20, 1) (40, 0) ; 
	TERM medium := gauss 40 15;
	TERM far := (40, 0) (60, 1) (300, 1);
END_FUZZIFY
FUZZIFY PINKYNPPdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (20, 1) (40, 0) ; 
	TERM medium := gauss 40 15;
	TERM far := (40, 0) (60, 1) (300, 1);
END_FUZZIFY
FUZZIFY INKYNPPdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (20, 1) (40, 0) ; 
	TERM medium := gauss 40 15;
	TERM far := (40, 0) (60, 1) (300, 1);
END_FUZZIFY
FUZZIFY SUENPPdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (20, 1) (40, 0) ; 
	TERM medium := gauss 40 15;
	TERM far := (40, 0) (60, 1) (300, 1);
END_FUZZIFY


FUZZIFY BLINKYEdibleTime
	TERM soon := (0,1)(15, 0) ; 
	TERM normal := gauss 15 5;
	TERM late := (15, 0) (25, 1) (200, 1);
END_FUZZIFY

FUZZIFY PINKYEdibleTime
	TERM soon := (0,1)(15, 0) ; 
	TERM normal := gauss 15 5;
	TERM late := (15, 0) (25, 1) (200, 1);
END_FUZZIFY

FUZZIFY INKYEdibleTime
	TERM soon := (0,1)(15, 0) ; 
	TERM normal := gauss 15 5;
	TERM late := (15, 0) (25, 1) (200, 1);
END_FUZZIFY

FUZZIFY SUEEdibleTime
	TERM soon := (0,1)(15, 0) ; 
	TERM normal := gauss 15 5;
	TERM late := (15, 0) (25, 1) (200, 1); //Max 187
END_FUZZIFY


FUZZIFY PacmanNPPdistance			
	TERM near := (20, 1) (40, 0) ; 
	TERM medium := gauss 40 15;
	TERM far := (40, 0) (60, 1) (300, 1);
END_FUZZIFY



DEFUZZIFY runAway			
	TERM calm := (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 15.0;	// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY eatBLINKY			
	TERM bad := (5,1) (15,0);	
	TERM good := gauss 15 5;
	TERM excellent := (15,0) (25,1) (30,1);
	METHOD : COG;		
	DEFAULT := 0;
END_DEFUZZIFY

DEFUZZIFY eatPINKY			
	TERM bad := (5,1) (15,0);	
	TERM good := gauss 15 5;
	TERM excellent := (15,0) (25,1) (30,1);
	METHOD : COG;		
	DEFAULT := 0;
END_DEFUZZIFY

DEFUZZIFY eatINKY			
	TERM bad := (5,1) (15,0);	
	TERM good := gauss 15 5;
	TERM excellent := (15,0) (25,1) (30,1);
	METHOD : COG;		
	DEFAULT := 0;
END_DEFUZZIFY

DEFUZZIFY eatSUE		
	TERM bad := (5,1) (15,0);	
	TERM good := gauss 15 5;
	TERM excellent := (15,0) (25,1) (30,1);
	
	METHOD : COG;		
	DEFAULT := 0;
END_DEFUZZIFY

DEFUZZIFY eatPowerPill			
	TERM bad := (5,1) (15,0);	
	TERM good := gauss 15 5;
	TERM excellent := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY




RULEBLOCK MsPacmanRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	//Huir
	//Te están persiguiendo muy cerca
	RULE 1 : IF BLINKYdistance IS near AND BLINKYconfidence IS high AND BLINKYEdibleTime IS NOT soon THEN runAway IS calm;
	RULE 2 : IF PINKYdistance IS near AND PINKYconfidence IS high AND PINKYEdibleTime IS NOT soon THEN runAway IS calm;
	RULE 3 : IF INKYdistance IS near AND INKYconfidence IS high AND INKYEdibleTime IS NOT soon THEN runAway IS calm;
	RULE 4 : IF SUEdistance IS near AND SUEconfidence IS high AND SUEEdibleTime IS NOT soon THEN runAway IS calm;
	
	RULE 5 : IF BLINKYdistance IS near AND BLINKYconfidence IS high AND BLINKYEdibleTime IS soon THEN runAway IS emergency;
	RULE 6 : IF PINKYdistance IS near AND PINKYconfidence IS high AND PINKYEdibleTime IS soon THEN runAway IS emergency;
	RULE 7 : IF INKYdistance IS near AND INKYconfidence IS high AND INKYEdibleTime IS soon THEN runAway IS emergency;
	RULE 8 : IF SUEdistance IS near AND SUEconfidence IS high AND SUEEdibleTime IS soon THEN runAway IS emergency;
		
	//No sabes dónde están	
	RULE 9 : IF BLINKYconfidence IS NOT high THEN runAway IS nervious;
	RULE 10 : IF PINKYconfidence IS NOT high THEN runAway IS nervious;
	RULE 11 : IF INKYconfidence IS NOT high THEN runAway IS nervious;
	RULE 12 : IF SUEconfidence IS NOT high THEN runAway IS nervious;

	//Están lejos, no tienes peligro
	RULE 13 : IF BLINKYdistance IS medium THEN runAway IS nervious;
	RULE 14 : IF PINKYdistance IS medium THEN runAway IS nervious;
	RULE 15 : IF INKYdistance IS medium THEN runAway IS nervious;
	RULE 16 : IF SUEdistance IS medium THEN runAway IS nervious;
	
	RULE 17 : IF BLINKYdistance IS far THEN runAway IS calm;
	RULE 18 : IF PINKYdistance IS far THEN runAway IS calm;
	RULE 19 : IF INKYdistance IS far THEN runAway IS calm;
	RULE 20 : IF SUEdistance IS far THEN runAway IS calm;


	//Atacar
	//Distancias con respecto a Edible Time
	RULE 21 : IF BLINKYdistance IS near AND BLINKYEdibleTime IS NOT soon THEN eatBLINKY IS excellent;
	RULE 22 : IF PINKYdistance IS near AND PINKYEdibleTime IS NOT soon THEN eatPINKY IS excellent;
	RULE 23 : IF INKYdistance IS near AND INKYEdibleTime IS NOT soon THEN eatINKY IS excellent;
	RULE 24 : IF SUEdistance IS near AND SUEEdibleTime IS NOT soon THEN eatSUE IS excellent;
	
	RULE 25 : IF BLINKYdistance IS near AND BLINKYEdibleTime IS soon THEN eatBLINKY IS bad;
	RULE 26 : IF PINKYdistance IS near AND PINKYEdibleTime IS soon THEN eatPINKY IS bad;
	RULE 27 : IF INKYdistance IS near AND INKYEdibleTime IS soon THEN eatINKY IS bad;
	RULE 28 : IF SUEdistance IS near AND SUEEdibleTime IS soon THEN eatSUE IS bad;
	
	RULE 29 : IF BLINKYdistance IS medium AND BLINKYEdibleTime IS NOT soon THEN eatBLINKY IS good;
	RULE 30 : IF PINKYdistance IS medium AND PINKYEdibleTime IS NOT soon THEN eatPINKY IS good;
	RULE 31 : IF INKYdistance IS medium AND INKYEdibleTime IS NOT soon THEN eatINKY IS good;
	RULE 32 : IF SUEdistance IS medium AND SUEEdibleTime IS NOT soon THEN eatSUE IS good;
		
	RULE 33 : IF BLINKYdistance IS medium AND BLINKYEdibleTime IS soon THEN eatBLINKY IS bad;
	RULE 34 : IF PINKYdistance IS medium AND PINKYEdibleTime IS soon THEN eatPINKY IS bad;
	RULE 35 : IF INKYdistance IS medium AND INKYEdibleTime IS soon THEN eatINKY IS bad;
	RULE 36 : IF SUEdistance IS medium AND SUEEdibleTime IS soon THEN eatSUE IS bad;
	
	//Si están lejos mejor ni atacar, no vas a llegar (y tienes muy poca precisión	
	RULE 37 : IF BLINKYdistance IS far THEN eatBLINKY IS bad;
	RULE 38 : IF PINKYdistance IS far THEN eatPINKY IS bad;
	RULE 39 : IF INKYdistance IS far THEN eatINKY IS bad;
	RULE 40 : IF SUEdistance IS far THEN eatSUE IS bad;
		
	//PowerPills	
	//Si no hay fantasmas cerca o solo hay uno persiguiendote mejor no comas la pp
	RULE 41: IF BLINKYdistance IS far AND  PINKYdistance IS far AND INKYdistance IS far AND  SUEdistance IS far THEN eatPowerPill IS bad;
	RULE 42: IF BLINKYdistance IS near AND PINKYdistance IS NOT near AND INKYdistance IS NOT near AND SUEdistance IS NOT near THEN eatPowerPill IS bad;
	RULE 43: IF BLINKYdistance IS NOT near AND PINKYdistance IS near AND INKYdistance IS NOT near AND SUEdistance IS NOT near THEN eatPowerPill IS bad;
	RULE 44: IF BLINKYdistance IS NOT near AND PINKYdistance IS NOT near AND INKYdistance IS near AND SUEdistance IS NOT near THEN eatPowerPill IS bad;
	RULE 45: IF BLINKYdistance IS NOT near AND PINKYdistance IS NOT near AND INKYdistance IS NOT near AND SUEdistance IS near THEN eatPowerPill IS bad;
	
	//Dos o más cerca comes PP
	RULE 46: IF BLINKYdistance IS near AND PINKYdistance IS near THEN eatPowerPill IS excellent;
	RULE 47: IF BLINKYdistance IS near AND INKYdistance IS near THEN eatPowerPill IS excellent;
	RULE 48: IF BLINKYdistance IS near AND SUEdistance IS NOT near THEN eatPowerPill IS excellent;
	RULE 49: IF PINKYdistance IS near AND INKYdistance IS near THEN eatPowerPill IS excellent;
	RULE 50: IF PINKYdistance IS near AND SUEdistance IS near THEN eatPowerPill IS excellent;
	RULE 51: IF INKYdistance IS near AND SUEdistance IS near THEN eatPowerPill IS excellent;
	
	//Distancia
	RULE 52: IF PacmanNPPdistance IS near THEN eatPowerPill IS good;
	RULE 53: IF PacmanNPPdistance IS medium THEN eatPowerPill IS bad;
	RULE 54: IF PacmanNPPdistance IS far THEN eatPowerPill IS bad;

	
END_RULEBLOCK

END_FUNCTION_BLOCK

